#!/usr/bin/env python3
"""
Heathrow Airport LCZ Classification Demo

This script demonstrates classifying Heathrow Airport using the urban_classifier.
Heathrow coordinates: 51.4700¬∞ N, 0.4543¬∞ W
"""

import polars as pl
import sys
from pathlib import Path

try:
    import urban_classifier
except ImportError:
    print("Error: urban_classifier package not found.")
    print("Make sure you've built the package with: maturin develop --features python")
    sys.exit(1)


def classify_heathrow():
    """
    Classify Heathrow Airport using the Global LCZ Map.

    Heathrow Airport coordinates:
    - Latitude: 51.4700¬∞ N
    - Longitude: 0.4543¬∞ W (which is -0.4543¬∞ in decimal degrees)
    """
    print("üõ¨ Heathrow Airport LCZ Classification")
    print("=====================================")
    print()

    # Heathrow Airport coordinates
    heathrow_lat = 51.4700
    heathrow_lon = -0.4543  # West longitude is negative

    print("üìç Location: Heathrow Airport, London, UK")
    print(f"üåê Coordinates: {heathrow_lat}¬∞N, {abs(heathrow_lon)}¬∞W")
    print(f"üî¢ Decimal: ({heathrow_lat}, {heathrow_lon})")
    print()

    # Create DataFrame with Heathrow data
    df = pl.DataFrame(
        {
            "station_id": ["HEATHROW_LHR"],
            "longitude": [heathrow_lon],
            "latitude": [heathrow_lat],
            "description": [
                "Heathrow Airport - London's primary international airport"
            ],
            "type": ["Airport"],
            "elevation_m": [25.0],  # Heathrow is about 25m above sea level
        }
    )

    print("Input DataFrame:")
    print(df)
    print()

    # Look for WUDAPT file
    wudapt_paths = [
        "wudapt_lcz_global.tif",
        "data/wudapt_lcz_global.tif",
        "../data/wudapt_lcz_global.tif",
        "/tmp/wudapt_lcz_global.tif",
        str(Path.home() / ".cache" / "urban_classifier" / "wudapt_lcz_global.tif"),
    ]

    wudapt_file = None
    for path in wudapt_paths:
        if Path(path).exists():
            file_size = Path(path).stat().st_size
            if file_size > 3_000_000_000:  # At least 3GB (should be ~4GB)
                wudapt_file = path
                break
            else:
                print(
                    f"‚ö†Ô∏è  Found {path} but it's too small ({file_size/1e9:.1f}GB) - likely incomplete"
                )

    if wudapt_file:
        print(f"‚úÖ Found complete WUDAPT file: {wudapt_file}")
        file_size_gb = Path(wudapt_file).stat().st_size / 1e9
        print(f"üìä File size: {file_size_gb:.1f} GB")
        print()
        print("üîç Running classification...")

        try:
            # Initialize classifier
            classifier = urban_classifier.PyUrbanClassifier(wudapt_file)

            # Perform classification
            result_df = classifier.run_classification(
                df,
                station_id_col="station_id",
                lon_col="longitude",
                lat_col="latitude",
                overrides=None,
            )

            print("üéØ CLASSIFICATION RESULTS:")
            print("=" * 50)
            print(result_df)
            print()

            # Extract and interpret the results
            lcz_code = result_df["lcz_code"][0]
            lcz_name = result_df["lcz_name"][0]
            simple_class = result_df["simple_class"][0]

            print("üìã HEATHROW AIRPORT CLASSIFICATION:")
            print("-" * 35)
            print(f"üè∑Ô∏è  LCZ Code: {lcz_code}")
            print(f"üìù LCZ Name: {lcz_name}")
            print(f"üèôÔ∏è  Category: {simple_class}")
            print()

            # Provide interpretation
            print("üß† INTERPRETATION:")
            print("-" * 17)

            if lcz_code == 8:
                print("‚úàÔ∏è  Large low-rise (LCZ 8) - This is EXPECTED for airports!")
                print("   ‚Ä¢ Airports typically classified as 'Large low-rise'")
                print(
                    "   ‚Ä¢ Large buildings (terminals) with extensive open areas (runways)"
                )
                print("   ‚Ä¢ Low building density but large building footprints")

            elif lcz_code == 9:
                print("üèòÔ∏è  Sparsely built (LCZ 9) - Also common for airports")
                print("   ‚Ä¢ Few buildings with extensive open paved areas")
                print("   ‚Ä¢ Runways and taxiways create large impervious surfaces")

            elif lcz_code == 15:
                print("üõ£Ô∏è  Bare rock or paved (LCZ 15) - Airport infrastructure")
                print("   ‚Ä¢ Dominated by paved surfaces (runways, taxiways, aprons)")
                print("   ‚Ä¢ Minimal vegetation or buildings in the classification area")

            elif simple_class == "Urban":
                print(f"üèôÔ∏è  Urban classification: {lcz_name}")
                print("   ‚Ä¢ Airport is in or adjacent to urban development")
                print("   ‚Ä¢ Likely influenced by surrounding built environment")

            elif simple_class == "Suburban":
                print(f"üèòÔ∏è  Suburban classification: {lcz_name}")
                print("   ‚Ä¢ Airport has suburban characteristics")
                print("   ‚Ä¢ Mixed development with moderate building density")

            else:
                print(f"üå≥ Rural classification: {lcz_name}")
                print(
                    "   ‚Ä¢ Unexpected for Heathrow - may indicate data resolution limits"
                )
                print("   ‚Ä¢ Could be sampling a less developed area near the airport")

            print()
            print("üå°Ô∏è  CLIMATE IMPLICATIONS:")
            print("-" * 22)

            if simple_class in ["Urban", "Suburban"]:
                print("‚Ä¢ Moderate to significant urban heat island effect")
                print("‚Ä¢ Airport infrastructure contributes to local warming")
                print("‚Ä¢ Large paved areas absorb and re-radiate heat")
                print("‚Ä¢ Reduced evapotranspiration compared to natural surfaces")
            else:
                print("‚Ä¢ Minimal urban heat island effect")
                print("‚Ä¢ Temperature patterns influenced by land surface properties")

            print()
            print("üìö AIRPORT CONTEXT:")
            print("-" * 17)
            print("‚Ä¢ Heathrow is one of the world's busiest airports")
            print("‚Ä¢ Massive infrastructure: 2 runways, 5 terminals")
            print("‚Ä¢ Located in Greater London urban area")
            print("‚Ä¢ Airport operations can influence local microclimate")

            return result_df

        except Exception as e:
            print(f"‚ùå Classification failed: {e}")
            print()
            print("üîß Possible issues:")
            print("‚Ä¢ File may be corrupted or incomplete")
            print("‚Ä¢ GDAL library issues")
            print("‚Ä¢ Coordinate transformation problems")
            print()
            print("üí° Try re-downloading the WUDAPT data:")
            print("   ./target/release/download_wudapt --force")
            return None
    else:
        print("‚ùå No complete WUDAPT GeoTIFF file found.")
        print()
        print("üì• To download the Global LCZ Map:")
        print("   ./target/release/download_wudapt")
        print()
        print("üìä Expected file size: ~4GB")
        print("‚è±Ô∏è  Download time: 10-60 minutes")
        print()

        # Show what we expect for Heathrow
        print("üîÆ EXPECTED CLASSIFICATION FOR HEATHROW:")
        print("-" * 42)
        print("Most likely: LCZ 8 (Large low-rise) or LCZ 9 (Sparsely built)")
        print("Category: Suburban")
        print("Reasoning:")
        print("‚Ä¢ Airports have large buildings (terminals) with low density")
        print("‚Ä¢ Extensive paved areas (runways, taxiways)")
        print("‚Ä¢ Mix of built and open impervious surfaces")
        print("‚Ä¢ Heathrow's massive scale fits 'Large low-rise' pattern")

        return None


def main():
    print("This will classify Heathrow Airport's Local Climate Zone")
    print("using the WUDAPT Global LCZ Map.")
    print()

    result = classify_heathrow()

    if result is not None:
        print()
        print("üéâ CLASSIFICATION COMPLETE!")
        print("=" * 30)
        print("You now have the official LCZ classification for Heathrow Airport")
        print("based on the WUDAPT Global Map derived from satellite imagery.")
        print()
        print("This data can be used for:")
        print("‚Ä¢ Climate impact studies")
        print("‚Ä¢ Urban heat island research")
        print("‚Ä¢ Airport environmental planning")
        print("‚Ä¢ Weather and climate modeling")


if __name__ == "__main__":
    main()
